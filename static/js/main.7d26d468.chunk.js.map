{"version":3,"sources":["Square.js","Table.js","algos/AlgosUtil.js","algos/AStar.js","PathFinder.js","algos/Dijkstra.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","isStart","isFinish","isBarrier","isInSearchArea","hasMainStylingClass","isOnShortestPath","this","mainStylingClass","getMainStylingClass","searchAreaClass","getSearchAreaStylingClass","shortestPathClass","getOnShortestPathStylingClass","className","onClick","handleClickOnSquare","position","data-testid","React","Component","Table","squares","map","row","rowIndex","key","square","squareIndex","getNeighboursOf","squarePosition","neighbours","ROWS","length","COLS","col","push","setInfiniteDistanceFromStart","i","j","Number","MAX_VALUE","getDistanceHeuristics","finishSquare","power","squareRow","squareCol","finishRow","finishCol","Math","pow","abs","PathFinder","getStartingSquare","startingSquare","filter","squaresInRow","getFinishSquare","handleSolveClick","eraseSearchAreaWithShortestPath","state","visitedSquares","algorithmType","priorityQueue","isFinished","sort","a","b","distance","currentSquare","shift","neighbour","computedDistanceOfNeighbour","previousSquare","hasBeenVisited","dijkstra","alert","heuristics","aStar","animateSolving","then","shortestPath","tempSquare","reverse","constructShortestPath","animateShortestPath","Promise","resolve","setTimeout","setState","positionOfClickedSquare","oldStartingSquare","oldFinishSquare","selectedSquareType","handleSquareTypeChoice","event","target","value","handleAlgorithmChange","wasSolved","createSquares","createStartingTemplate","BARRIERS_POSITION","squaresForAnimation","onChange","setInSearchAreaPropertyOfSquare","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7d26d468.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Square.css\";\n\nclass Square extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  getMainStylingClass(isStart, isFinish, isBarrier) {\n    return isStart ? \"start\" : isFinish ? \"finish\" : isBarrier ? \"barrier\" : \"\";\n  }\n\n  getSearchAreaStylingClass(isInSearchArea, hasMainStylingClass) {\n    if (isInSearchArea && !hasMainStylingClass) {\n      return \"search-area\";\n    } else {\n      return \"\";\n    }\n  }\n\n  getOnShortestPathStylingClass(isOnShortestPath, hasMainStylingClass) {\n    if (isOnShortestPath && !hasMainStylingClass) {\n      return \"shortest-path\";\n    } else {\n      return \"\";\n    }\n  }\n\n  render() {\n    const { isStart, isFinish, isBarrier, isInSearchArea, isOnShortestPath } = this.props;\n\n    const mainStylingClass = this.getMainStylingClass(isStart, isFinish, isBarrier);\n\n    const hasMainStylingClass = mainStylingClass ? true : false;\n\n    const searchAreaClass = this.getSearchAreaStylingClass(isInSearchArea, hasMainStylingClass);\n\n    const shortestPathClass = this.getOnShortestPathStylingClass(isOnShortestPath, hasMainStylingClass);\n\n    return (\n      <button\n        className={`square ${mainStylingClass} ${searchAreaClass} ${shortestPathClass}`}\n        onClick={() => this.props.handleClickOnSquare(this.props.position)}\n        data-testid=\"square\"\n      ></button>\n    );\n  }\n}\n\nexport default Square;\n","import React from \"react\";\nimport Square from \"./Square\";\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { squares } = this.props;\n    return (\n      <div className=\"table\">\n        {squares.map((row, rowIndex) => {\n          return (\n            <div key={rowIndex}>\n              {row.map((square, squareIndex) => {\n                return (\n                  <Square\n                    key={squareIndex}\n                    position={square.position}\n                    isStart={square.isStart}\n                    isFinish={square.isFinish}\n                    isBarrier={square.isBarrier}\n                    isInSearchArea={square.isInSearchArea}\n                    isOnShortestPath={square.isOnShortestPath}\n                    handleClickOnSquare={this.props.handleClickOnSquare}\n                  ></Square>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Table;\n","export function getNeighboursOf(square, squares) {\n    let squarePosition = square.position;\n    let neighbours = [];\n  \n    const ROWS = squares.length;\n    const COLS = squares[0].length;\n  \n    //TODO: Refactor\n    if (squarePosition.row + 1 !== ROWS) {\n      if (!squares[squarePosition.row + 1][squarePosition.col].isBarrier) {\n        neighbours.push(squares[squarePosition.row + 1][squarePosition.col]);\n      }\n    }\n  \n    if (squarePosition.row - 1 >= 0) {\n      if (!squares[squarePosition.row - 1][squarePosition.col].isBarrier) {\n        neighbours.push(squares[squarePosition.row - 1][squarePosition.col]);\n      }\n    }\n  \n    if (squarePosition.col + 1 !== COLS) {\n      if (!squares[squarePosition.row][squarePosition.col + 1].isBarrier) {\n        neighbours.push(squares[squarePosition.row][squarePosition.col + 1]);\n      }\n    }\n  \n    if (squarePosition.col - 1 >= 0) {\n      if (!squares[squarePosition.row][squarePosition.col - 1].isBarrier) {\n        neighbours.push(squares[squarePosition.row][squarePosition.col - 1]);\n      }\n    }\n  \n    return neighbours;\n  }\n  \n  export function constructShortestPath(startingSquare, finishSquare) {\n    let shortestPath = [];\n    let tempSquare = finishSquare;\n    if (!finishSquare.previousSquare) {\n      return;\n    }\n    while (tempSquare !== startingSquare) {\n      shortestPath.push(tempSquare);\n      tempSquare = tempSquare.previousSquare;\n    }\n    shortestPath.reverse();\n    return shortestPath;\n  }\n  \n  export function setInfiniteDistanceFromStart(squares){\n    const ROWS = squares.length;\n    const COLS = squares[0].length;\n    for (let i = 0; i < COLS; i++) {\n      for (let j = 0; j < ROWS; j++) {\n        if (squares[i][j].isStart) {\n          squares[i][j][\"distance\"] = 0;\n        } else {\n          squares[i][j][\"distance\"] = Number.MAX_VALUE;\n        }\n        squares[i][j][\"previousSquare\"] = null;\n        squares[i][j][\"hasBeenVisited\"] = false;\n      }\n    }\n  };","import{setInfiniteDistanceFromStart, getNeighboursOf} from \"./AlgosUtil\";\n\nexport function aStar(squares, startingSquare, finishSquare) {\n  const POWER_OF_HEURISTICS = 4;\n  let visitedSquares = [];\n  setInfiniteDistanceFromStart(squares);\n  let priorityQueue = [];\n  priorityQueue.push(startingSquare);\n  let isFinished = false;\n  while (priorityQueue.length && !isFinished) {\n    priorityQueue.sort((a, b) => {\n      if (a.distance <= b.distance) {\n        return -1;\n      }\n      return 1;\n    });\n    let currentSquare = priorityQueue[0];\n    //TODO: Remove exists?\n    priorityQueue.shift();\n    let neighbours = getNeighboursOf(currentSquare, squares);\n    for (let i = 0; i < neighbours.length; i++) {\n      let neighbour = neighbours[i];\n      let computedDistanceOfNeighbour = currentSquare.distance + 1;\n      let heuristics = getDistanceHeuristics(neighbour, finishSquare, POWER_OF_HEURISTICS);\n      if (computedDistanceOfNeighbour + heuristics < neighbour.distance) {\n        neighbour.distance = computedDistanceOfNeighbour + heuristics;\n        neighbour.previousSquare = currentSquare;\n      }\n\n      if (neighbour === finishSquare) {\n        isFinished = true;\n        break;\n      }\n\n      if (!neighbour.hasBeenVisited) {\n        priorityQueue.push(neighbour);\n        neighbour.hasBeenVisited = true;\n        visitedSquares.push(neighbour);\n      }\n      squares[neighbour.position.row][neighbour.position.col] = neighbour;\n    }\n  }\n  return visitedSquares;\n}\n\nfunction getDistanceHeuristics (square, finishSquare, power){\n  const squareRow = square.position.row;\n  const squareCol = square.position.col;\n  const finishRow = finishSquare.position.row;\n  const finishCol = finishSquare.position.col;\n  return Math.pow(Math.abs(finishRow - squareRow) + Math.abs(finishCol - squareCol), power);\n};\n","import React from \"react\";\nimport \"./PathFinder.css\";\nimport Table from \"./Table\";\nimport { dijkstra } from \"./algos/Dijkstra\";\nimport { aStar } from \"./algos/AStar\";\nimport { constructShortestPath } from \"./algos/AlgosUtil\";\n\nconst COLS = 19;\nconst ROWS = 19;\n\nclass PathFinder extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: [],\n      selectedSquareType: \"start\",\n      wasSolved: false,\n      visitedSquares: [],\n      shortestPath: [],\n      algorithmType: \"dijkstra\",\n    };\n  }\n\n  componentDidMount() {\n    this.createSquares();\n  }\n\n  createSquares() {\n    let squares = [];\n    for (let i = 0; i < COLS; i++) {\n      let squaresInRow = [];\n      for (let j = 0; j < ROWS; j++) {\n        const square = {\n          position: { row: i, col: j },\n          isStart: false,\n          isFinish: false,\n          isBarrier: false,\n          //isInSearchArea: false,\n        };\n        squaresInRow.push(square);\n      }\n      squares.push(squaresInRow);\n    }\n    this.setState({ squares }, this.createStartingTemplate);\n  }\n\n  createStartingTemplate() {\n    const START_ROW = 9;\n    const START_COL = 5;\n\n    const FINISH_ROW = 9;\n    const FINISH_COL = 13;\n\n    const BARRIERS_POSITION = [\n      [8, 9],\n      [9, 9],\n      [10, 9],\n    ];\n\n    const squares = this.state.squares;\n\n    squares[START_ROW][START_COL] = {\n      position: { row: START_ROW, col: START_COL },\n      isStart: true,\n      isFinish: false,\n      isBarrier: false,\n    };\n\n    squares[FINISH_ROW][FINISH_COL] = {\n      position: { row: FINISH_ROW, col: FINISH_COL },\n      isStart: false,\n      isFinish: true,\n      isBarrier: false,\n    };\n\n    squares[FINISH_ROW][FINISH_COL] = {\n      position: { row: FINISH_ROW, col: FINISH_COL },\n      isStart: false,\n      isFinish: true,\n      isBarrier: false,\n    };\n\n    for (let i = 0; i < BARRIERS_POSITION.length; i++) {\n      let row = BARRIERS_POSITION[i][0];\n      let col = BARRIERS_POSITION[i][1];\n      squares[row][col] = {\n        position: { row: BARRIERS_POSITION[i][0], col: BARRIERS_POSITION[i][1] },\n        isStart: false,\n        isFinish: false,\n        isBarrier: true,\n      };\n    }\n\n    this.setState({ squares });\n  }\n\n  getStartingSquare = (squares) => {\n    //TODO: Refactor\n    let startingSquare = {};\n    squares.filter((squaresInRow) => {\n      let squareRow = squaresInRow.filter((square) => {\n        if (square.isStart === true) {\n          startingSquare = square;\n        }\n      });\n    });\n    return startingSquare;\n  };\n\n  getFinishSquare = (squares) => {\n    //TODO: Refactor\n    let finishSquare = {};\n    squares.filter((squaresInRow) => {\n      let squareRow = squaresInRow.filter((square) => {\n        if (square.isFinish === true) {\n          finishSquare = square;\n        }\n      });\n    });\n    return finishSquare;\n  };\n\n  handleSolveClick = () => {\n    this.eraseSearchAreaWithShortestPath();\n    let squares = this.state.squares;\n    let visitedSquares = [];\n    const startingSquare = this.getStartingSquare(squares);\n    const finishSquare = this.getFinishSquare(squares);\n\n    if (this.state.algorithmType === \"dijkstra\") {\n      visitedSquares = dijkstra(squares, startingSquare, finishSquare);\n    } else if (this.state.algorithmType === \"a_star\") {\n      visitedSquares = aStar(squares, startingSquare, finishSquare);\n    } else {\n      alert(\"No algorithm has been chosen!\");\n      return;\n    }\n\n    this.animateSolving(squares, visitedSquares).then(() => {\n      const shortestPath = constructShortestPath(startingSquare, finishSquare);\n      if (shortestPath) {\n        this.animateShortestPath(squares, shortestPath);\n      }\n    });\n  };\n\n  animateSolving = async (squares, visitedSquares) => {\n    const DELAY_BETWEEN_SQUARE_ANIMATION = 10;\n    return new Promise((resolve) => {\n      for (let i = 0; i < visitedSquares.length; i++) {\n        let currentSquare = visitedSquares[i];\n        setTimeout(() => {\n          squares[currentSquare.position.row][currentSquare.position.col].isInSearchArea = true;\n          this.setState({ squares: squares });\n        }, DELAY_BETWEEN_SQUARE_ANIMATION * (i + 1));\n        setTimeout(resolve, DELAY_BETWEEN_SQUARE_ANIMATION * visitedSquares.length);\n      }\n    });\n  };\n\n  animateShortestPath = (squares, shortestPath) => {\n    const DELAY_BETWEEN_SQUARE_ON_PATH_ANIMATION = 50;\n    for (let i = 0; i < shortestPath.length - 1; i++) {\n      setTimeout(() => {\n        let currentSquare = shortestPath[i];\n        //TODO: Timeout not working properly? Maybe problem with this.state.squares?\n        squares[currentSquare.position.row][currentSquare.position.col].isOnShortestPath = true;\n        this.setState({ squares });\n      }, DELAY_BETWEEN_SQUARE_ON_PATH_ANIMATION * (i + 1));\n    }\n  };\n\n  eraseSearchAreaWithShortestPath = () => {\n    let squares = this.state.squares;\n    for (let i = 0; i < ROWS; i++) {\n      for (let j = 0; j < COLS; j++) {\n        squares[i][j].hasBeenVisited = false;\n        squares[i][j].isInSearchArea = false;\n        squares[i][j].isOnShortestPath = false;\n      }\n    }\n    this.setState({ squares: squares });\n  };\n\n  handleClickOnSquare = (positionOfClickedSquare) => {\n    let squares = this.state.squares;\n    //TODO: ADD start node and finish node from start\n    const oldStartingSquare = this.getStartingSquare(squares);\n    const oldFinishSquare = this.getFinishSquare(squares);\n    //TODO: Proper refactoring needed\n    if (\n      positionOfClickedSquare !== oldStartingSquare.position &&\n      positionOfClickedSquare !== oldFinishSquare.position\n    ) {\n      if (this.state.selectedSquareType === \"start\") {\n        squares[oldStartingSquare.position.row][oldStartingSquare.position.col].isStart = false;\n      }\n      if (this.state.selectedSquareType === \"finish\") {\n        squares[oldFinishSquare.position.row][oldFinishSquare.position.col].isFinish = false;\n      }\n\n      squares[positionOfClickedSquare.row][positionOfClickedSquare.col] = {\n        ...squares[positionOfClickedSquare.row][positionOfClickedSquare.col],\n        position: { row: positionOfClickedSquare.row, col: positionOfClickedSquare.col },\n        isStart: this.state.selectedSquareType === \"start\" ? true : false,\n        isFinish: this.state.selectedSquareType === \"finish\" ? true : false,\n      };\n    }\n\n    if (this.state.selectedSquareType === \"barrier\") {\n      squares[positionOfClickedSquare.row][positionOfClickedSquare.col].isBarrier = !squares[\n        positionOfClickedSquare.row\n      ][positionOfClickedSquare.col].isBarrier;\n    }\n\n    this.setState({ squares: squares });\n    this.eraseSearchAreaWithShortestPath();\n  };\n\n  handleSquareTypeChoice = (event) => {\n    this.setState({ selectedSquareType: event.target.value });\n  };\n\n  handleAlgorithmChange = (event) => {\n    this.setState({ algorithmType: event.target.value });\n    this.eraseSearchAreaWithShortestPath();\n  };\n\n  render() {\n    const { squares, selectedSquareType, wasSolved, squaresForAnimation, shortestPath } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"navbar\">\n          <ul>\n            <li>Algo Visualizer</li>\n            <li>Shortest Path</li>\n          </ul>\n        </div>\n        <div className=\"solve-section\">\n          <div className=\"select-box\">\n            <label>Square: </label>\n            <select className=\"select\" onChange={this.handleSquareTypeChoice}>\n              <option value=\"start\">Start</option>\n              <option value=\"finish\">Finish</option>\n              <option value=\"barrier\">Barrier</option>\n            </select>\n          </div>\n          <div className=\"select-box\">\n            <label>Algorithm: </label>\n            <select className=\"select\" onChange={this.handleAlgorithmChange}>\n              <option value=\"dijkstra\">Dijkstra</option>\n              <option value=\"a_star\">A*</option>\n            </select>\n          </div>\n          <div>\n            <button className=\"solve-button\" onClick={this.handleSolveClick}>\n              Find shortest path\n            </button>\n          </div>\n        </div>\n        <div className=\"tablePosition\">\n          <Table\n            squares={squares}\n            selectedSquareType={selectedSquareType}\n            wasSolved={wasSolved}\n            squaresForAnimation={squaresForAnimation}\n            shortestPath={shortestPath}\n            setInSearchAreaPropertyOfSquare={this.setInSearchAreaPropertyOfSquare}\n            handleClickOnSquare={this.handleClickOnSquare}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PathFinder;\n","import { setInfiniteDistanceFromStart, getNeighboursOf } from \"./AlgosUtil\";\n\nexport function dijkstra(squares, startingSquare, finishSquare) {\n  let visitedSquares = [];\n  let priorityQueue = [];\n  let isFinished = false;\n  setInfiniteDistanceFromStart(squares);\n  priorityQueue.push(startingSquare);\n  while (priorityQueue.length && !isFinished) {\n    priorityQueue.sort((a, b) => {\n      if (a.distance <= b.distance) {\n        return -1;\n      }\n      return 1;\n    });\n    let currentSquare = priorityQueue[0];\n    //TODO: Remove?\n    priorityQueue.shift();\n    let neighbours = getNeighboursOf(currentSquare, squares);\n    for (let i = 0; i < neighbours.length; i++) {\n      let neighbour = neighbours[i];\n      let computedDistanceOfNeighbour = currentSquare.distance + 1;\n\n      if (computedDistanceOfNeighbour < neighbour.distance) {\n        neighbour.distance = computedDistanceOfNeighbour;\n        neighbour.previousSquare = currentSquare;\n      }\n\n      if (neighbour === finishSquare) {\n        isFinished = true;\n        break;\n      }\n\n      if (!neighbour.hasBeenVisited) {\n        priorityQueue.push(neighbour);\n        neighbour.hasBeenVisited = true;\n        visitedSquares.push(neighbour);\n      }\n      squares[neighbour.position.row][neighbour.position.col] = neighbour;\n    }\n  }\n  return visitedSquares;\n}\n","import React from \"react\";\nimport PathFinder from \"./PathFinder\";\n\nclass App extends React.Component{\n\n  render() {\n    return(\n    <div>\n      <PathFinder></PathFinder>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}